#processors		1 1 2			# El numero de procesadores total que uso es el producto de los 3

# Ejecutar el script de Python para obtener un número primo aleatorio y guardar en un archivo
shell python3 generate_prime.py


# Leer el número primo desde el archivo
variable seed file prime_seed.txt

# Comandos generales
atom_style granular
boundary f f p
units si
communicate single vel yes
newton off


# Variables del sistema
variable xmin equal -1.55
variable xmax equal 1.55
variable ymin equal -1.55
variable ymax equal 1.55
variable zmin equal -0.25
variable zmax equal 6.3

variable dt equal 1e-4
variable natoms equal 2

include sim.params

# Variables de los materiales
variable youngmodulus1 equal ${YoungModulus}
variable youngmodulus2 equal ${YoungModulus}

variable poisson1 equal 0.3
variable poisson2 equal 0.3

variable CoR11 equal 0.9
variable CoR12 equal 0.9
variable CoR21 equal 0.9
variable CoR22 equal 0.9

variable sf11 equal 0.5
variable sf12 equal 0.5
variable sf21 equal 0.5
variable sf22 equal 0.5

variable radius equal ${Particle_radius}
variable density equal ${Density}



# Variables de la simulación
variable filltime equal 12.5
variable fillmass equal 24000
variable fillmassrate equal ${fillmass}/${filltime}
variable fillsteps equal ${filltime}/${dt}

variable openvel equal 1.0
variable opentime equal 1
variable opensteps equal ${opentime}/${dt}

variable dumptime equal 0.1
variable dumpstep equal ${dumptime}/${dt}
variable dumptime2 equal ${dt}
variable dumpstep2 equal ${dumptime2}/${dt}

variable MinEnerg equal 10e-10

variable radio_orificio equal ${Orifice_radius}

# Comandos de LIGGGHTS
region reg block ${xmin} ${xmax} ${ymin} ${ymax} ${zmin} ${zmax} units box
create_box 2 reg
neighbor 0.004 bin
neigh_modify delay 0
pair_style gran model hertz tangential history
pair_coeff * *
timestep ${dt}
fix integrator all nve/sphere
fix gravi all gravity ${Gravity} vector 0.0 0.0 -1.0


# Definición de la región para aplicar fuerza
variable altura equal 1.5
variable minxbloq equal ${xmin}/2.0
variable maxxbloq equal ${xmax}/2.0
variable minybloq equal ${ymin}/2.0
variable maxybloq equal ${ymax}/2.0
region bot_region block ${minxbloq} ${maxxbloq} ${minybloq} ${maxybloq} 0 ${altura} units box


# Variables para el conteo de avalanchas
variable avalanche_count equal 0.0
variable avalanche_count_static equal 0.0
variable num_particles_avalancha equal 0.0
variable num_particles_avalancha_static equal 0.0
variable tiempo_caida_libre equal sqrt(2.0*${radio_orificio}/9.8)
variable pasos_caida_libre equal round(${tiempo_caida_libre}/${dt})



# Definir las propiedades de las partículas
fix m1 all property/global youngsModulus peratomtype ${youngmodulus1} ${youngmodulus2}
fix m2 all property/global poissonsRatio peratomtype ${poisson1} ${poisson2}
fix m3 all property/global coefficientRestitution peratomtypepair ${natoms} ${CoR11} ${CoR12} ${CoR21} ${CoR22}
fix m4 all property/global coefficientFriction peratomtypepair ${natoms} ${sf11} ${sf12} ${sf21} ${sf22}


# Crear las mallas físicas
fix silo all mesh/surface file Silo.stl type 2
fix lid all mesh/surface file Lid.stl type 2
fix walls all wall/gran model hertz tangential history  mesh n_meshes 2 meshes silo lid


# Crear las mallas de utilidad
fix exit_mesh all mesh/surface/planar file Lid.stl type 2


# Crear las partículas
fix pts all particletemplate/sphere 10487 atom_type 1 density constant ${density} radius constant ${radius}
fix pdd all particledistribution/discrete 32452867 1 pts 1.0
fix ins_mesh all mesh/surface/planar file Insertionsface.stl type 1
fix ins all insert/stream seed ${seed} distributiontemplate pdd &
    mass ${fillmass} massrate ${fillmassrate} overlapcheck yes all_in yes vel constant 0 0 -0.95 &
    insertion_face ins_mesh extrude_length 0.25


# Crear los archivos de salida
#shell mkdir post
#dump dmpparticle all custom/vtk ${dumpstep} post/particles_*.vtk id type x y z vx vy vz fx fy fz radius mass
#dump dmpsilo all mesh/stl ${dumpstep} post/Silo*.stl silo
#dump dmplid all mesh/stl ${dumpstep} post/Lid*.stl lid

# Guardar backup
restart 100000 poly.restart

# Correr llenado
run ${fillsteps}
unfix ins


# Minimización de la energía
compute energ all ke update_on_run_end yes
label settle_loop
run 100000
variable curr_energ equal c_energ
if "${curr_energ} > ${MinEnerg}" then "jump SELF settle_loop"


# Medición de caudal
group g1 type 1
fix mass g1 massflow/mesh mesh exit_mesh vec_side 0. 0. -1.
variable  MassTotal equal f_mass[1]
variable  NoPTotal  equal f_mass[2]
variable  MassFlow  equal f_mass[3]
variable  NoPFlow   equal f_mass[4]
variable  tiempo    equal ${dt}*step


# Imprimir las mediciones de caudal
fix output all print ${dumpstep2} "${tiempo},${MassTotal},${MassFlow},${NoPTotal},${NoPFlow}" screen no file Measurements.csv title "Time,MassTotal,MassFlow,NoPTotal,NoPFlow"


# Abrir el silo
fix MoveLid all move/mesh mesh lid linear ${openvel} 0. 0.
run ${opensteps}
unfix MoveLid


# Simulación de descarga
variable num_particles equal f_mass[2]
variable num_particles_static equal ${num_particles}
variable se_aplico_movimiento equal 0
variable num_particles_final equal 0

# Imprimir las mediciones de avalanchas
fix output2 all print ${pasos_caida_libre} "${avalanche_count_static},${num_particles},${num_particles_final},${num_particles_static},${num_particles_avalancha_static},${se_aplico_movimiento}" screen no file avalanchas.csv title "AvalancheCount,NumParticlesAvalancheRealTime,NumParticlesForDiffRealTime,NumParticlesForDiffStartAvalanche,DiffNumParticlesClogging,se_aplico_movimiento"


variable radio_bloqueo equal 10.0*${radius}
variable altura_bloqueo equal 6.0*${radius}

variable tiempo_caida_libre_2 equal sqrt(12.0*${radius}/9.8)
variable pasos_caida_libre_2 equal round(${tiempo_caida_libre_2}/${dt})

region bloqueo cylinder z 0.0 0.0 ${radio_bloqueo} 0.0 ${altura_bloqueo}


variable distancia_movida equal 6.0*${radius}
variable tiempo_movida    equal 0.5
variable velocidad_movida equal ${distancia_movida}/${tiempo_movida}
variable pasos_movida     equal ${tiempo_movida}/${dt}

label loop_start
# AGREGUE DESDE ACA
variable num_particles equal f_mass[2]
variable num_particles_static equal ${num_particles}
# HASTA ACA


run ${pasos_caida_libre}

variable num_particles_final equal f_mass[2]
variable num_particles_final_static equal ${num_particles_final}

variable num_particles_avalancha equal ${num_particles_final}-${num_particles_static}
variable num_particles_avalancha_static equal ${num_particles_avalancha}
variable avalanche_count_static equal ${avalanche_count}

variable v_min equal -0.5*${velocidad_movida}
variable v_max equal 0.5*${velocidad_movida}
variable v_y_random equal random(${v_min},${v_max},${seed})
variable v_x_random equal random(${v_min},${v_max},${seed})

if "${num_particles_avalancha} == 0" then &
    "variable v_y_random equal random(${v_min},${v_max},${seed})" &
    "variable v_x_random equal random(${v_min},${v_max},${seed})" &
    "variable avalanche_count equal ${avalanche_count}+1" &
    "variable avalanche_count_static equal ${avalanche_count}" &
    "group arco region bloqueo" &
    "fix move_block arco move linear ${v_x_random} ${v_y_random} ${velocidad_movida}" &
    "variable se_aplico_movimiento equal 1" &
    "run ${pasos_movida}" &
    "unfix move_block" &
    "group arco delete" &
    "run ${pasos_caida_libre_2}" &  
    "variable num_particles equal f_mass[2]" &
    "variable num_particles_static equal ${num_particles}" &
    "variable se_aplico_movimiento equal 0"

if "${avalanche_count} == 200" then &
  "jump SELF end_loop" &
  else &
  "jump SELF loop_start"

label end_loop
